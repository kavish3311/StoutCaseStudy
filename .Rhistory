lm_train_pred <- predict(ir_lm,train)
lm_test_pred <- predict(ir_lm, test)
summary(ir_lm)
cat("Adjusted R^2^ of Linear Regression is: ",0.9989)
lm_train_mse <- mean((train$interest_rate - lm_test_pred)^2)
lm_test_mse <- mean((test$interest_rate - lm_test_pred)^2)
cat("Test MSE of Linear Regression is:", lm_test_mse,'\n')
lm_train_mse <- mean((train$interest_rate - lm_test_pred)^2)
cat("Train MSE of Linear Regression is:", lm_train_mse,'\n')
lm_test_mse <- mean((test$interest_rate - lm_test_pred)^2)
cat("Test MSE of Linear Regression is:", lm_test_mse,'\n')
lm_train_mse <- mean((train$interest_rate - lm_train_pred)^2)
cat("Train MSE of Linear Regression is:", lm_train_mse,'\n')
lm_test_mse <- mean((test$interest_rate - lm_test_pred)^2)
cat("Test MSE of Linear Regression is:", lm_test_mse,'\n')
cat("Adjusted R^2 of Linear Regression is: ",0.9989,'\n')
require(gbm)
ir_gbm <- gbm(interest_rate ~ ., data = train, distribution = "gaussian"
,n.trees = 1000, shrinkage = 0.05)
summary(ir_gbm)
gbm_train_pred <- predict(ir_gbm, train, n.trees = 1000)
gbm_test_pred <- predict(ir_gbm, test, n.trees = 1000)
ir_gbm_train_MSE <- mean((train$interest_rate - gbm_train_pred)^2)
cat("Training MSE of boosted tree is:", ir_gbm_train_MSE,'\n')
ir_gbm_test_MSE <- mean((test$interest_rate - gbm_test_pred)^2)
cat("Test MSE of boosted tree is:", ir_gbm_test_MSE,'\n')
lm_train_mse <- mean((train$interest_rate - lm_train_pred)^2)
cat("Train MSE of Linear Regression is:", lm_train_mse,'\n')
lm_test_mse <- mean((test$interest_rate - lm_test_pred)^2)
cat("Test MSE of Linear Regression is:", lm_test_mse,'\n')
sse_gbm <- sum((test$interest_rate-gbm_test_pred)^2)
sst_gbm <- sum((mean(test$interest_rate)-test$interest_rate)^2)
gbm_r2 <- 1 - (sse_gbm/sst_gbm)
cat("R^2 for Boosted model:", vol_r2)
sse_gbm <- sum((test$interest_rate-gbm_test_pred)^2)
sst_gbm <- sum((mean(test$interest_rate)-test$interest_rate)^2)
gbm_r2 <- 1 - (sse_gbm/sst_gbm)
cat("R^2 for Boosted model:", gbm_r2)
summary(ir_lm)
new_df <- subset(df, select = -c(current_accounts_delinq,
num_accounts_30d_past_due,num_accounts_120d_past_due))
new_df <- subset(df, select = -c(grade,sub_grade))
sample1 <- sample.split(new_df$interest_rate, SplitRatio = 0.65)
df.train1 <- subset(new_df,sample1 == T)
df.test1 <- subset(new_df,sample1 == F)
train1 <- df.train1
test1 <- df.test1
ir_lm1 <- lm(interest_rate~., data = train1)
summary(ir_lm1)
lm_train_pred1 <- predict(ir_lm1,train1)
lm_test_pred1 <- predict(ir_lm1, test1)
lm_train_mse1 <- mean((train1$interest_rate - lm_train_pred1)^2)
cat("Train MSE of Linear Regression is:", lm_train_mse1,'\n')
lm_test_mse1 <- mean((test1$interest_rate - lm_test_pred1)^2)
cat("Test MSE of Linear Regression is:", lm_test_mse1,'\n')
cat("Adjusted R^2 of Linear Regression is: ",0.7059,'\n')
vol_boost1 <- gbm(interest_rate ~ ., data = train1, distribution = "gaussian"
,n.trees = 1000, shrinkage = 0.05)
summary(vol_boost1)
ir_gbm1 <- gbm(interest_rate ~ ., data = train1, distribution = "gaussian"
,n.trees = 1000, shrinkage = 0.05)
summary(ir_gbm1)
gbm_train_pred1 <- predict(ir_gbm1, train1, n.trees = 1000)
gbm_test_pred1 <- predict(ir_gbm1, test1, n.trees = 1000)
ir_gbm_train_MSE1 <- mean((train1$interest_rate - gbm_train_pred1)^2)
cat("Training MSE of boosted tree is:", ir_gbm_train_MSE1,'\n')
ir_gbm_train_MSE1 <- mean((train1$interest_rate - gbm_train_pred1)^2)
cat("Training MSE of boosted tree is:", ir_gbm_train_MSE1,'\n')
ir_gbm_test_MSE1 <- mean((test$interest_rate - gbm_test_pred1)^2)
cat("Test MSE of boosted tree is:", ir_gbm_test_MSE1,'\n')
ir_gbm_test_MSE1 <- mean((test1$interest_rate - gbm_test_pred1)^2)
cat("Test MSE of boosted tree is:", ir_gbm_test_MSE1,'\n')
ir_gbm_train_MSE1 <- mean((train1$interest_rate - gbm_train_pred1)^2)
cat("Training MSE of boosted tree is:", ir_gbm_train_MSE1,'\n')
ir_gbm_test_MSE1 <- mean((test1$interest_rate - gbm_test_pred1)^2)
cat("Test MSE of boosted tree is:", ir_gbm_test_MSE1,'\n')
sse_gbm1 <- sum((test1$interest_rate-gbm_test_pred1)^2)
sst_gbm1 <- sum((mean(test1$interest_rate)-test1$interest_rate)^2)
gbm_1_r2 <- 1 - (sse_gbm1/sst_gbm1)
cat("R^2 for Boosted model:", gbm_1_r2)
ir_gbm_train_MSE1 <- mean((train1$interest_rate - gbm_train_pred1)^2)
cat("Training MSE of boosted tree is:", ir_gbm_train_MSE1,'\n')
ir_gbm_test_MSE1 <- mean((test1$interest_rate - gbm_test_pred1)^2)
cat("Test MSE of boosted tree is:", ir_gbm_test_MSE1,'\n')
trees <- c(500,750,1000,2000)
length.trees <- length(trees)
gbm_train_errors_t <- rep(-1, length.trees)
gbm_test_errors_t <- rep(-1, length.trees)
for (i in 1:length.trees){
gbm_t <- gbm(interest_rate ~ ., data = train1, distribution = "gaussian"
,n.trees = trees[i], shrinkage = 0.05)
gbm_train_pred_t <- predict(gbm_t, train1)
gbm_test_pred_t <- predict(gbm_t, test1)
gbm_train_errors_t[i]<-mean((train1$interest_rate- gbm_train_pred_t)^2)
gbm_test_errors_t[i] <- mean((test1$interest_rate - gbm_test_pred_t)^2)
}
ggplot(data.frame(x=trees, y=gbm_test_errors_t), aes(x=x, y=y))+
xlab("ntrees") + ylab("Test MSE")+
geom_point(color="steelblue", size = 2, alpha=.8)
min(gbm_test_errors_t)
trees[which.min(gbm_test_errors_t)]
lambdas <- seq(0.01,0.10,by=0.01)
length.shrinkage <- length(lambdas)
gbm_train_errors_s <- rep(-1, length.shrinkage)
gbm_test_errors_s <- rep(-1, length.shrinkage)
for (i in 1:length.shrinkage){
gbm_s <- gbm(interest_rate ~ ., data = train1, distribution = "gaussian"
,n.trees = 2000, shrinkage = lambdas[i])
gbm_train_pred_s <- predict(gbm_s, train1)
gbm_test_pred_s <- predict(gbm_s, test1)
gbm_train_errors_s[i]<-mean((train1$interest_rate - gbm_train_pred_s)^2)
gbm_test_errors_s[i] <- mean((test1$interest_rate - gbm_test_pred_s)^2)
}
ggplot(data.frame(x=lambdas, y=gbm_test_errors_s), aes(x=x, y=y))+
xlab("Lambdas") + ylab("Test MSE")+
geom_point(color="steelblue", size = 2, alpha=.8)
min(gbm_test_errors_s)
trees[which.min(gbm_test_errors_s)]
min(gbm_test_errors_s)
lambdas[which.min(gbm_test_errors_s)]
gbm_cv <- gbm(interest_rate ~ .,data = train1, distribution = "gaussian"
,n.trees = 2000, shrinkage = 0.10,cv.folds=10)
gbmcv_train_pred <- predict(gbm_cv, train1)
gbmcv_test_pred <- predict(gbm_cv, test1)
gbmcv_train_errors2 <- mean((train1$interest_rate - gbmcv_train_pred)^2)
gbmcv_test_errors <- mean((test1$interest_rate - gbmcv_test_pred)^2)
cat("Test MSE for GBM CV:",gbmcv_test_errors)
sse_gbmcv <- sum((test1$interest_rate-gbmcv_test_pred)^2)
sst_gbmcv <- sum((mean(test1$interest_rate)-test1$interest_rate)^2)
gbmcv_r2 <- 1 - (sse_gbmcv/sst_gbmcv)
cat("R^2 for GBM CV:", gbmcv_r2)
cat("R^2 for Boosted model:", gbm_1_r2)
predictions <- data.frame(gbmcv_test_pred,test1$interest_rate)
View(predictions)
ggplot(predictions,
aes(x = predictions,
y = test1.interest_rate)) +
geom_point(color="cornflowerblue",
size = 2,
alpha=.8) +
labs(x = "Predicted",
y = "Actual",
title = "Predicted vs. Actual")
ggplot(predictions,
aes(x = gbmcv_test_pred,
y = test1.interest_rate)) +
geom_point(color="cornflowerblue",
size = 2,
alpha=.8) +
labs(x = "Predicted",
y = "Actual",
title = "Predicted vs. Actual")
ggplot(predictions,
aes(x = gbmcv_test_pred,
y = test1.interest_rate)) +
geom_point(color="cornflowerblue",
size = 2,
alpha=.8) +
geom_smooth(method = "lm")+
labs(x = "Predicted",
y = "Actual",
title = "Predicted vs. Actual")
idx <- seq(1,length(test1$interest_rate))
predictions <- data.frame(idx,gbmcv_test_pred,test1$interest_rate)
ggplot(predictions,
aes(x=idx))+
geom_line(aes(y=gbmcv_test_pred),color='darkred')+
geom_line(aes(y=test1.interest_rate),color='steelblue')
ggplot(predictions,
aes(x=idx))+
geom_point(aes(y=gbmcv_test_pred),color='darkred')+
geom_point(aes(y=test1.interest_rate),color='steelblue')
ggplot()+
geom_point(aes(y=gbmcv_test_pred),color='darkred')+
geom_point(aes(y=test1.interest_rate),color='steelblue')
ggplot()+
geom_point(data=predictions,aes(y=gbmcv_test_pred),color='darkred')+
geom_point(data=predictions,aes(y=test1.interest_rate),color='steelblue')
ggplot(predictions,
aes(x=idx))+
geom_point(aes(y=gbmcv_test_pred),color='darkred')+
geom_point(aes(y=test1.interest_rate),color='steelblue')
ggplot(predictions,
aes(x=idx))+
geom_point(aes(y=gbmcv_test_pred[1:100]),color='darkred')+
geom_point(aes(y=test1.interest_rate[1:100]),color='steelblue')
ggplot(predictions[1:100,],
aes(x=idx))+
geom_point(aes(y=gbmcv_test_pred),color='darkred')+
geom_point(aes(y=test1.interest_rate),color='steelblue')
ggplot(predictions[1:100,],
aes(x=idx))+
geom_line(aes(y=gbmcv_test_pred),color='darkred')+
geom_line(aes(y=test1.interest_rate),color='steelblue')
ggplot(predictions[1:100,],
aes(x=idx))+
geom_line(aes(y=gbmcv_test_pred),color='darkred')+
geom_point(size = 3, color = "steelblue") +
geom_line(aes(y=test1.interest_rate),color='steelblue')
ggplot(predictions[1:100,],
aes(x=idx))+
geom_line(aes(y=gbmcv_test_pred),color='darkred')+
geom_point(aes(y=gbmcv_test_pred,size = 3, color = "darkred")) +
geom_line(aes(y=test1.interest_rate),color='steelblue')+
geom_point(aes(y=test1.interest_rate,size = 3, color = "steelblue"))
ggplot(predictions[1:100,],
aes(x=idx))+
geom_line(aes(y=gbmcv_test_pred),color='darkred')+
#geom_point(aes(y=gbmcv_test_pred,size = 3, color = "darkred")) +
geom_line(aes(y=test1.interest_rate),color='steelblue')
sort(gbmcv_test_pred)
predictions <- data.frame(idx,sort(gbmcv_test_pred),sort(test1$interest_rate))
ggplot(predictions[1:100,],
aes(x=idx))+
geom_line(aes(y=gbmcv_test_pred),color='darkred')+
#geom_point(aes(y=gbmcv_test_pred,size = 3, color = "darkred")) +
geom_line(aes(y=test1.interest_rate),color='steelblue')
idx <- seq(1,length(test1$interest_rate))
predictions <- data.frame(idx,unique(gbmcv_test_pred),unique(test1$interest_rate))
predictions1 <- predictions %>% group_by(test1.interest_rate) %>% summarise_each(funs(mean))
predictions1 <- predictions %>% group_by(sort.test1.interest_rate) %>% summarise_each(funs(mean))
predictions1 <- predictions %>% group_by(sort.test1.interest_rate.) %>% summarise_each(funs(mean))
View(predictions1)
predictions1$idx <- seq(1,nrow(predictions1))
ggplot(predictions1,aes(x=idx))+
geom_line(aes(y=gbmcv_test_pred),color='darkred')+
#geom_point(aes(y=gbmcv_test_pred,size = 3, color = "darkred")) +
geom_line(aes(y=test1.interest_rate),color='steelblue')
names(predictions1)
ggplot(predictions1,aes(x=idx))+
geom_line(aes(y=sort.gbmcv_test_pred.),color='darkred')+
#geom_point(aes(y=gbmcv_test_pred,size = 3, color = "darkred")) +
geom_line(aes(y=sort.test1.interest_rate.),color='steelblue')
ggplot(predictions1,aes(x=idx))+
geom_line(aes(y=sort.gbmcv_test_pred.),color='darkred')+
geom_point(aes(y=sort.gbmcv_test_pred.,size = 3, color = "darkred")) +
geom_line(aes(y=sort.test1.interest_rate.),color='steelblue')+
geom_point(aes(y=sort.test1.interest_rate.,size = 3, color = "steelblue"))
ggplot(predictions1,aes(x=idx))+
geom_line(aes(y=sort.gbmcv_test_pred.),color='darkred')+
geom_point(aes(y=sort.gbmcv_test_pred.,size = 0.5, color = "darkred")) +
geom_line(aes(y=sort.test1.interest_rate.),color='steelblue')+
geom_point(aes(y=sort.test1.interest_rate.,size = 0.5, color = "steelblue"))
ggplot(predictions1,aes(x=idx))+
geom_line(aes(y=sort.gbmcv_test_pred.),color='darkred')+
geom_line(aes(y=sort.test1.interest_rate.),color='steelblue')+
scale_color_manual(values=c("Predicted" = "darkred","Actual"="steelblue"))
ggplot(predictions1,aes(x=idx))+
geom_line(aes(y=sort.gbmcv_test_pred.),color='darkred')+
geom_line(aes(y=sort.test1.interest_rate.),color='steelblue')+
scale_color_manual(values=c("Predicted" = "darkred","Actual"="steelblue"))+
labs(xlab='Index',ylab='Predicted vs Actual')
ggplot(predictions1,aes(x=idx))+
geom_line(aes(y=sort.gbmcv_test_pred.),color='Predicted')+
geom_line(aes(y=sort.test1.interest_rate.),color='Actual')+
scale_color_manual(values=c("Predicted" = "darkred","Actual"="steelblue"))+
labs(xlab='Index',ylab='Predicted vs Actual')
ggplot(predictions1,aes(x=idx))+
geom_line(aes(y=sort.gbmcv_test_pred.),color='sort.gbmcv_test_pred.')+
geom_line(aes(y=sort.test1.interest_rate.),color='sort.test1.interest_rate.')+
scale_color_manual(values=c("sort.gbmcv_test_pred." = "darkred","sort.test1.interest_rate."="steelblue"))+
labs(xlab='Index',ylab='Predicted vs Actual')
ggplot(predictions1,aes(x=idx))+
geom_line(aes(y=sort.gbmcv_test_pred.,color='sort.gbmcv_test_pred.'))+
geom_line(aes(y=sort.test1.interest_rate.,color='sort.test1.interest_rate.'))+
scale_color_manual(values=c("sort.gbmcv_test_pred." = "darkred","sort.test1.interest_rate."="steelblue"))+
labs(xlab='Index',ylab='Predicted vs Actual')
names(predictions1) <- c("Actual","index","Predicted")
ggplot(predictions1,aes(x=idx))+
geom_line(aes(y=Actual,color='Actual'))+
geom_line(aes(y=Predicted,color='Predicted'))+
scale_color_manual(values=c("Actual" = "darkred","Predicted"="steelblue"))+
labs(xlab='Index',ylab='Predicted vs Actual')
ggplot(predictions1,aes(x=index))+
geom_line(aes(y=Actual,color='Actual'))+
geom_line(aes(y=Predicted,color='Predicted'))+
scale_color_manual(values=c("Actual" = "darkred","Predicted"="steelblue"))+
labs(xlab='Index',ylab='Predicted vs Actual')
df_pairs <- select_if(df,is.numeric)
df_pairs <- subset(df_pairs, select = c(annual_income_joint,
total_credit_lines,debt_to_income_joint,
open_credit_lines,
total_credit_limit,total_credit_utilized,
total_debit_limit,loan_amount,
interest_rate,installment,
balance,paid_total,paid_principal,
paid_interest))
df_pairs <- subset(df_pairs, select = c(annual_income_joint,
total_credit_lines,debt_to_income_joint,
open_credit_lines,
total_credit_utilized,
total_debit_limit,loan_amount,
interest_rate,installment,
balance,paid_total,paid_principal,
paid_interest))
df_pairs <- subset(df_pairs, select = c(annual_income_joint,
debt_to_income_joint,
open_credit_lines,
total_credit_limit,total_credit_utilized,
total_debit_limit,loan_amount,
interest_rate,installment,
balance,paid_total,paid_principal,
paid_interest))
df_pairs <- subset(df_pairs, select = c(annual_income_joint,
debt_to_income_joint,
total_credit_limit,total_credit_utilized,
total_debit_limit,loan_amount,
interest_rate,installment,
balance,paid_total,paid_principal,
paid_interest))
df_pairs <- subset(df_pairs, select = c(annual_income_joint,
debt_to_income_joint,
total_credit_limit,
total_debit_limit,loan_amount,
interest_rate,installment,
balance,paid_total,paid_principal,
paid_interest))
r <- round(cor(df_pairs, use="complete.obs"),1)
ggcorrplot(r,hc.order = TRUE,type = "lower",lab = TRUE)
ggcorrplot(r, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of Loan Data",
ggtheme=theme_bw)
income_dist <- subset(df, select = c("homeownership","annual_income_joint"))
income_dist$homeownership <- inverse.transform(lab_enc, as.factor(df$homeownership))
ggplot(df,aes(x = annual_income_joint,fill = homeownership)) +
geom_density(alpha = 0.4) +
labs(title = "Income distribution by Home-Ownership")
#DATA VIZ
require(ggplot2)
require(choroplethr)
require(choroplethrMaps)
require(dplyr)
data(continental_us_states)
df_viz <- data.frame(cbind(df$state,df$annual_income_joint))
df_viz1 <- data.frame(cbind(df$state,df$annual_income_joint,df$total_credit_utilized)) #
names(df_viz) <- c("region","value")
#DATA VIZ
require(ggplot2)
require(choroplethr)
require(choroplethrMaps)
require(dplyr)
data(continental_us_states)
df_viz <- data.frame(cbind(df$state,df$annual_income_joint))
names(df_viz) <- c("region","value")
df_viz <- data.frame(cbind(df$state,df$annual_income_joint))
View(df_viz)
install.packages("htmltools")
install.packages("htmltools")
install.packages(c("htmltools", "xfun"))
setwd("D:/Projects/Stout")
install.packages('htmltools')
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
setwd("D:/Projects/Stout")
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv('casestudy.csv')
df2 <- subset(df, select= -c(customer_email,X))
df <- read.csv('casestudy.csv')
View(df)
df2 <- subset(df, select= -c(customer_email,X))
View(df2)
df2 %>% group_by(year) %>% summarise(net_revenue=sum(net_revenue))
library(dplyr)
df <- read.csv('casestudy.csv')
df2 <- subset(df, select= -c(customer_email,X))
df2 %>% group_by(year) %>% summarise(net_revenue=sum(net_revenue))
yearly <- split(df, f = df$year)
View(yearly)
yearly["2015"]
df_2015 <- data.frame(yearly["2015"])
names(df_2015) <- names(df)
df_2016 <- data.frame(yearly["2016"])
names(df_2016) <- names(df)
df_2017 <- data.frame(yearly["2017"])
names(df_2017) <- names(df)
df <- subset(df, select = -X)
yearly <- split(df, f = df$year)
df_2015 <- data.frame(yearly["2015"])
names(df_2015) <- names(df)
df_2016 <- data.frame(yearly["2016"])
names(df_2016) <- names(df)
df_2017 <- data.frame(yearly["2017"])
names(df_2017) <- names(df)
new_2016 <- df_2016[-common15_16,] # give you common rows in data frame 2
common15_16 <- intersect(df_2015$customer_email, df_2016$col)
common15_16 <- intersect(df_2015$customer_email, df_2016$customer_email)
new_2016 <- df_2016[-common15_16,] # give you common rows in data frame 2
new_2016 <- df_2016[common15_16,] # give you common rows in data frame 2
View(new_2016)
new_2016 <- df_2015[!(df_2015$customer_email %in% df_2016$customer_email),]
View(new_2016)
new_2016 %>% group_by(year) %>% summarise(total_revenue=sum(net_revenue))
new_2017 <- df_2016[!(df_2016$customer_email %in% df_2017$customer_email),]
new_2017 %>% group_by(year) %>% summarise(New_2017_Revenue=sum(net_revenue))
new_2016 <- df_2015[!(df_2016$customer_email %in% df_2015$customer_email),]
new_2016 %>% group_by(year) %>% summarise(New_2016_Revenue=sum(net_revenue))
new_2016 <- df_2016[!(df_2016$customer_email %in% df_2015$customer_email),]
new_2016 %>% group_by(year) %>% summarise(New_2016_Revenue=sum(net_revenue))
new_2017 <- df_2017[!(df_2016$customer_email %in% df_2017$customer_email),]
new_2017 %>% group_by(year) %>% summarise(New_2017_Revenue=sum(net_revenue))
common_2016 <- df_2016[df_2016$customer_email %in% df_2015$customer_email,]
existing_2016 <- inner_join(common_2016,df_2015,by="customer_email")
View(existing_2016)
existing_2016$growth <- existing_2016$net_revenue.y - existing_2016$net_revenue.x
print(head(existing_2016),10)
common_2017 <- df_2017[df_2017$customer_email %in% df_2016$customer_email,]
existing_2017 <- inner_join(common_2017,df_2016,by="customer_email")
existing_2017$growth <- existing_2017$net_revenue.y - existing_2017$net_revenue.x
print(head(existing_2017),10)
print(data.frame(total_2015,total_2016,total_2017))
total_2015 <- nrow(df_2015)
total_2016 <- nrow(df_2016)
total_2017 <- nrow(df_2017)
print(data.frame(total_2015,total_2016,total_2017))
new_2016
lost_2016 <- new_2016[!(new_2016$customer_email %in% df_2015),]
View(lost_2016)
head(new_2016)
head(new_2017)
df <- read.csv('casestudy.csv')
df <- subset(df, select = -X)
df2 <- subset(df, select= -c(customer_email,X))
library(dplyr)
df <- read.csv('casestudy.csv')
df <- read.csv('casestudy.csv')
df <- subset(df, select = -X)
df <- subset(df, select = -X)
library(dplyr)
df <- read.csv('casestudy.csv')
df <- read.csv('casestudy.csv')
df <- subset(df, select = -X)
df2 <- subset(df, select= -c(customer_email,X))
df2 <- subset(df, select= -c(customer_email))
df2 %>% group_by(year) %>% summarise(total_revenue=sum(net_revenue))
yearly <- split(df, f = df$year)
df_2015 <- data.frame(yearly["2015"])
names(df_2015) <- names(df)
df_2016 <- data.frame(yearly["2016"])
names(df_2016) <- names(df)
df_2017 <- data.frame(yearly["2017"])
names(df_2017) <- names(df)
new_2016 <- df_2016[!(df_2016$customer_email %in% df_2015$customer_email),]
new_2016 %>% group_by(year) %>% summarise(New_2016_Revenue=sum(net_revenue))
new_2017 <- df_2017[!(df_2016$customer_email %in% df_2017$customer_email),]
new_2017 %>% group_by(year) %>% summarise(New_2017_Revenue=sum(net_revenue))
new_2016 <- df_2016[!(df_2016$customer_email %in% df_2015$customer_email),]
new_2016 %>% group_by(year) %>% summarise(New_2016_Revenue=sum(net_revenue))
new_2017 <- df_2017[!(df_2016$customer_email %in% df_2017$customer_email),]
new_2017 %>% group_by(year) %>% summarise(New_2017_Revenue=sum(net_revenue))
new_2016 <- df_2016[!(df_2016$customer_email %in% df_2015$customer_email),]
new_2016 %>% group_by(year) %>% summarise(New_2016_Revenue=sum(net_revenue))
new_2017 <- df_2017[!(df_2016$customer_email %in% df_2017$customer_email),]
new_2017 %>% group_by(year) %>% summarise(New_2017_Revenue=sum(net_revenue))
common_2016 <- df_2016[df_2016$customer_email %in% df_2015$customer_email,]
existing_2016 <- inner_join(common_2016,df_2015,by="customer_email")
existing_2016$growth <- existing_2016$net_revenue.y - existing_2016$net_revenue.x
print(head(existing_2016),10)
common_2017 <- df_2017[df_2017$customer_email %in% df_2016$customer_email,]
existing_2017 <- inner_join(common_2017,df_2016,by="customer_email")
existing_2017$growth <- existing_2017$net_revenue.y - existing_2017$net_revenue.x
print(head(existing_2017),10)
common_2016 <- df_2016[df_2016$customer_email %in% df_2015$customer_email,]
existing_2016 <- inner_join(common_2016,df_2015,by="customer_email")
existing_2016$growth <- existing_2016$net_revenue.y - existing_2016$net_revenue.x
print(head(existing_2016),10)
common_2017 <- df_2017[df_2017$customer_email %in% df_2016$customer_email,]
existing_2017 <- inner_join(common_2017,df_2016,by="customer_email")
existing_2017$growth <- existing_2017$net_revenue.y - existing_2017$net_revenue.x
print(head(existing_2017),10)
lost_2016 <- new_2016[!(new_2016$customer_email %in% df_2015),]
total_2015 <- nrow(df_2015)
total_2016 <- nrow(df_2016)
total_2017 <- nrow(df_2017)
print(data.frame(total_2015,total_2016,total_2017))
new_2017 <- df_2017[!(df_2016$customer_email %in% df_2017$customer_email),]
new_2017 %>% group_by(year) %>% summarise(New_2017_Revenue=sum(net_revenue))
lost_2016 <- df_2016[!df_2016$customer_email %in% df_2015$customer_email),]
lost_2016 <- df_2016[!df_2016$customer_email %in% df_2015$customer_email,]
View(lost_2016)
unique(lost_2016$customer_email)
unique(count(lost_2016$customer_email))
unique(lost_2016[c("customer_email")])
lost_2017 <- df_2017[!df_2017$customer_email %in% df_2017$customer_email,]
lost_2017 <- df_2017[!df_2017$customer_email %in% df_2016$customer_email,]
nrow(lost_2016)
lost_2016 <- df_2016[!df_2016$customer_email %in% df_2015$customer_email,]
lost_2017 <- df_2017[!df_2017$customer_email %in% df_2016$customer_email,]
print("customers lostt in 2016:")
nrow(lost_2016)
print("customers lostt in 2017:")
nrow(lost_2017)
lost_2016 <- df_2016[!df_2016$customer_email %in% df_2015$customer_email,]
lost_2017 <- df_2017[!df_2017$customer_email %in% df_2016$customer_email,]
print("customers lost in 2016:")
nrow(lost_2016)
print("customers lost in 2017:")
nrow(lost_2017)
print("customers gained in 2016:")
head(new_2016)
print("customers gained in 2016:")
head(new_2017)
print("customers gained in 2016:")
nrow(new_2016)
print("customers gained in 2016:")
nrow(new_2017)
lost_2016 <- new_2016[!(new_2016$customer_email %in% df_2015),]
